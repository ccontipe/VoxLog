# Copyright (c) 2025 Cesar Contipelli Neto
# Todos os direitos reservados.
# Proibida a modificação e distribuição sem autorização do autor.

import logging
from tkinter import messagebox
import google.generativeai as genai # Importar diretamente

logger = logging.getLogger(__name__)

# Tenta importar google.generativeai globalmente, essencial para a GEM
try:
    import google.generativeai as genai
except ImportError:
    logger.critical("Erro Fatal: google.generativeai não pôde ser importado. A geração de solução Azure não funcionará. Verifique a instalação.")
    genai = None


def get_solution_prompt_azure(transcription_text):
    """
    Retorna o prompt completo para a geração de proposta de solução técnica para AZURE,
    incluindo todas as diretrizes, exemplos de Terraform e instruções de output para a GEM.
    """
    # --------------------------------------------------------------------------
    # --- CONTEÚDO DA "GEM DE SOLUÇÃO" EMBUTIDO AQUI PARA AZURE ---
    # Este prompt é específico para a plataforma Azure.
    # --------------------------------------------------------------------------
    main_solution_prompt_content = (
        "Você é uma inteligência artificial especializada em arquitetura de soluções em nuvem. Sua missão PRINCIPAL é analisar as informações fornecidas (que vêm de uma análise de transcrição de reuniões de negócios) e gerar uma proposta de solução técnica detalhada, **aderindo estritamente às diretrizes e padrões corporativos fornecidos, à plataforma cloud Azure e incluindo scripts Terraform para a infraestrutura**.\n\n"
        "**Sua resposta DEVE seguir rigorosamente a seguinte estrutura, com seções de texto, PlantUML e Terraform separadas por cabeçalhos específicos para facilitar a extração:**\n\n"
        "---\n\n"
        "### Proposta de Solução Técnica: Projeto [Nome do Projeto - inferir da transcrição] em Azure\n\n"
    )

    platform_specific_guidelines = (
        "**1. Análise do Problema e Requisitos:**\n\n"
        "   * Faça um resumo conciso do problema de negócio exposto na transcrição, incluindo os desafios principais (ex: prazo, complexidade de componentes, segurança, etc.).\n\n"
        "   * Liste os requisitos funcionais e não funcionais relevantes (ex: autenticação, autorização, exposição de serviços em API Gateway, integração com sistemas legados via arquivos ou chamadas à API, escalabilidade, segurança).\n\n"
        "   * Mencione explicitamente os modelos de autenticação, autorização, integração entre plataformas (cloud, on-premises, mainframe e open shift, etc.) e as preferências/preocupações levantadas.\n\n"
        "**2. Premissas de Negócio Essenciais:**\n\n"
        "   * Identifique e liste as principais premissas que a solução técnica deve respeitar (ex: faseamento da implementação, preferência por determinada forma de faturamento, restrições técnicas e orçamentárias se mencionadas, etc.).\n\n"
        "**3. Diretrizes e Premissas Corporativas para a Solução (Azure - CRUCIAL):**\n\n"
        "   * **Ambiente de Implantação:** Qualquer novo serviço computacional proposto deve ser criado e implementado exclusivamente no Ambiente Azure.\n"
        "   * **Componentes e Serviços:** As soluções devem utilizar preferencialmente os componentes e serviços nativos disponíveis no Azure.\n"
        "   * **Padrão Corporativo:** O uso de Functions e Logic Apps é **desencorajado**. A solução corporativa e padrão é a utilização do **ARO (Azure Red Hat OpenShift)**.\n"
        "   * **Padrão de Artefato Corporativo:** O padrão de artefato inclui: Azure Tenant, On-premises, Acesso Externo, Hub Interno, Shared Infrastructure, VNETs e subscriptions associadas ao serviço Transacionar em cada ambiente (PR, HO, DV).\n\n"
        "**4. Visão Geral da Solução em Azure (Well-Architected Infrastructure):**\n\n"
        "   * Descreva a abordagem geral da solução em Azure.\n\n"
        "   * Mencione a adesão aos pilares do Azure Well-Architected Framework (Confiabilidade, Segurança, Excelência Operacional, Otimização de Custos, Eficiência de Desempenho).\n\n"
        "   * Identifique o padrão de arquitetura que mais se adapta ao problema identificado, preferencialmente utilizando **Microsserviços** devido às premissas de ARO.\n"
        "   * Explique como o padrão de arquitetura adotado (ex.: de microsserviços, Event-Driven Architecture, etc. ) é o modelo mais adequado para ser o pilar da solução.\n\n"
        "**5. Componentes da Solução Azure e sua Relação com o Problema/Solução:**\n\n"
        "   * Para cada componente Azure que você propor, siga este formato:\n\n"
        "       * **Nome do Componente Azure:** (Ex: Azure App Service / Azure Resources for Openshift (ARO))\n\n"
        "       * **Relação com o Problema/Solução:** Explique como o componente atende a um requisito ou resolve parte do problema. Faça referência explícita aos \"10 componentes chave da arquitetura de microsserviços\" sempre que aplicável (ex: \"Servirá como plataforma para hospedar os **Microsserviços**\").\n\n"
        "       * **Well-Architected:** Descreva como o componente contribui para os pilares do Well-Architected Framework (ex: \"Promove a **Excelência de Desempenho**...\"). **Para os microsserviços implantados no ARO, detalhe a contribuição individual de cada microsserviço para os pilares do Well-Architected Framework.**\n\n"
        "   * Detalhe os serviços Azure propostos e sua relação com a solução, bem como sua contribuição para os pilares do Well-Architected Framework, especialmente para os microsserviços implantados no ARO.\n\n"
        "   * Certifique-se de abordar componentes que cobrem os requisitos de:\n\n"
        "       * Hospedagem de aplicações (microsserviços, portal administrativo interno, portal de consumo externo para parceiros, etc.).\n\n"
        "       * Gerenciamento de APIs.\n\n"
        "       * Bancos de dados.\n\n"
        "       * Comunicação síncrona/assíncrona.\n\n"
        "       * Gerenciamento de identidades.\n\n"
        "       * Monitoramento.\n\n"
        "       * Balanceamento de carga e CDN.\n\n"
        "       * Conectividade híbrida (on-premises).\n\n"
        "       * Segurança de segredos.\n\n"
        "**6. Segurança e Conformidade (PCI SSC):**\n\n"
        "   * Com base na necessidade de lidar com dados sensíveis, especialmente dados de cartão (se aplicável), detalhe como a solução proposta atende ou se alinha aos padrões do PCI Security Standards Council (PCI SSC), conforme lembrado: \"O PCI Security Standards Council (PCI SSC) estabelece padrões de segurança para proteger dados de cartão, desde o design de software até o manuseio de dispositivos físicos. Os principais padrões incluem PCI DSS, PCI P2PE, Secure Software Standard & Secure SLC, e PTS POI. O PCI SSC oferece recursos suplementares e programas de qualificação para profissionais. A conformidade com os padrões PCI é crucial para organizações que lidam com dados de cartões.\"\n"
        "   * Explique como os componentes Azure escolhidos contribuem para a conformidade com o PCI DSS (Data Security Standard) e outros padrões relevantes do PCI SSC, incluindo aspectos como:\n"
        "       * Proteção de Dados de Titular de Cartão: Como os dados sensíveis são armazenados e transmitidos de forma segura.\n"
        "       * Segurança de Redes e Sistemas: Medidas para proteger a rede e os sistemas de acessos não autorizados.\n"
        "       * Controle de Acesso: Como o acesso aos dados é restrito e monitorado.\n"
        "       * Monitoramento e Testes Regulares: Como a segurança será continuamente monitorada e testada.\n"
        "       * Manutenção de uma Política de Segurança da Informação: A importância da documentação e conscientização sobre as políticas de segurança.\n\n"
    )
    plantuml_section_guidelines = (
        "**8. Informações Relevantes Adicionais:**\n\n"
        "   * **UTILIZE AS SEGUINTES INFORMAÇÕES SALVAS:**\n\n"
        "       * \"Visão geral dos 10 componentes chave da arquitetura de microsserviços: Cliente, CDN, Load Balancer, API Gateway, Microsserviços, Message Broker, Databases, Identity Provider, Service Registry e Discovery, Service Coordenação (e.g., Zookeeper).\"\n\n"
        "**9. Geração de Diagramas PlantUML (Azure):**\n\n"
        "Gere o código PlantUML para os seguintes diagramas. Assegure-se de que os nomes dos elementos sejam consistentes com a descrição da solução e reflitam os serviços Azure.\n\n"
        "**Formato de Saída para PlantUML:**\n"
        "Para cada diagrama, envolva o código PlantUML em blocos de código Markdown ````plantuml` e use cabeçalhos específicos:\n\n"
        "#### Diagrama PlantUML: C1 Contexto\n"
        "```plantuml\n"
        "@startuml <NomeDoDiagrama>\n\n"
        "!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n"
        "LAYOUT_WITH_LEGEND()\n\n"
        "title Diagrama de Contexto do Sistema: [Nome do Projeto]\n\n"
        "Person(user, \"Usuário\", \"Utiliza a aplicação\")\n"
        "System(System, \"[Nome do Sistema]\", \"Sistema principal em Azure\")\n"
        "System_Ext(LegacySystem, \"Sistema Legado\", \"Sistema de [descrever] (On-premises)\")\n\n"
        "Rel(user, System, \"Utiliza\", \"HTTPS\")\n"
        "Rel(System, LegacySystem, \"Integra com\", \"API REST / FTP\")\n"
        "@enduml\n"
        "```\n\n"
        "#### Diagrama PlantUML: C2 Contêineres\n"
        "```plantuml\n"
        "@startuml <NomeDoDiagrama>\n\n"
        "!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n"
        "LAYOUT_WITH_LEGEND()\n\n"
        "title Diagrama de Contêineres: [Nome do Projeto]\n\n"
        "System_Boundary(c4_System, \"[Nome do Sistema]\") {\n"
        "  Container(spa, \"Portal Web\", \"JavaScript e React\", \"Permite acesso via navegador\")\n"
        "  Container(api_gateway, \"API Gateway\", \"Azure API Management\", \"Expõe APIs para microsserviços\")\n"
        "  Container(microsservicos_aro, \"Microsserviços Core\", \"Containers no Azure Red Hat OpenShift (ARO)\", \"Serviços de negócio central\")\n"
        "  ContainerDb(database, \"Banco de Dados Principal\", \"Azure PostgreSQL\", \"Armazena dados transacionais\")\n"
        "  Container(message_broker, \"Message Broker\", \"Azure Service Bus / Event Hub\", \"Comunicação assíncrona\")\n"
        "}\n\n"
        "Person(user, \"Usuário\")\n"
        "System_Ext(LegacySystem, \"Sistema Legado\")\n\n"
        "Rel(user, spa, \"Acessa\", \"HTTPS\")\n"
        "Rel(spa, api_gateway, \"Faz chamadas API\", \"HTTPS\")\n"
        "Rel(api_gateway, microsservicos_aro, \"Encaminha requisições para\", \"HTTPS\")\n"
        "Rel(microsservicos_aro, database, \"Lê e Escreve\", \"SQL\")\n"
        "Rel(microsservicos_aro, message_broker, \"Envia/Recebe mensagens de\", \"AMQP\")\n"
        "Rel(microsservicos_aro, LegacySystem, \"Integra via\", \"API REST / FTP\")\n"
        "@enduml\n"
        "```\n\n"
        "#### Diagrama PlantUML: C3 Componentes\n"
        "```plantuml\n"
        "@startuml <NomeDoDiagrama>\n\n"
        "!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n"
        "LAYOUT_WITH_LEGEND()\n\n"
        "title Diagrama de Componentes: Microsserviços Core\n\n"
        "Container_Boundary(microsservicos_aro, \"Microsservicos Core (ARO)\") {\n"
        "  Component(comp_users, \"Serviço de Usuários\", \"Spring Boot REST API\", \"Gerencia perfis de usuários\")\n"
        "  Component(comp_products, \"Serviço de Produtos\", \"Node.js REST API\", \"Gerencia catálogo de produtos\")\n"
        "  Component(comp_orders, \"Serviço de Pedidos\", \"Python Flask REST API\", \"Processa pedidos e transações\")\n"
        "  Component(comp_notifications, \"Serviço de Notificações\", \"Java REST API\", \"Envia notificações (email, sms)\")\n"
        "}\n\n"
        "ContainerDb(database, \"Banco de Dados Principal\")\n"
        "Container(message_broker, \"Message Broker\")\n\n"
        "Rel(comp_users, database, \"Lê e Escreve\", \"SQL\")\n"
        "Rel(comp_products, database, \"Lê e Escreve\", \"SQL\")\n"
        "Rel(comp_orders, database, \"Lê e Escreve\", \"SQL\")\n"
        "Rel(comp_orders, comp_notifications, \"Envia pedido para\", \"Mensagem Assíncrona\")\n"
        "Rel(comp_notifications, message_broker, \"Publica/Consome de\", \"AMQP\")\n"
        "@enduml\n"
        "```\n\n"
        "#### Diagrama PlantUML: Sequência\n"
        "```plantuml\n"
        "@startuml <NomeDoDiagrama>\n\n"
        "title Fluxo de Processamento de Pedido\n\n"
        "participant \"Cliente (Portal Web)\" as Cliente\n"
        "participant \"API Gateway (Azure APIM)\" as APIGateway\n"
        "participant \"Microsserviço de Pedidos (ARO)\" as OrderService\n"
        "participant \"Banco de Dados Principal (PostgreSQL)\" as Database\n"
        "participant \"Message Broker (Service Bus)\" as MessageBroker\n"
        "participant \"Microsserviço de Notificações (ARO)\" as NotificationService\n\n"
        "Cliente -> APIGateway: Requisição de Pedido (HTTPS)\n"
        "APIGateway -> OrderService: Encaminha Pedido (HTTPS)\n"
        "OrderService -> Database: Salva Detalhes do Pedido (SQL)\n"
        "Database --> OrderService: Confirmação\n"
        "OrderService -> MessageBroker: Publica Evento 'Pedido Processado' (AMQP)\n"
        "MessageBroker -> NotificationService: Envia Evento\n"
        "NotificationService -> Cliente: Envia Confirmação de Pedido (Email/SMS)\n"
        "@enduml\n"
        "```\n\n"
    )
    terraform_templates_str = ( # Convertido para string única para ser inserido no prompt
        "**10. Geração de Scripts Terraform (Azure):**\n\n" # Renumerado
        "Gere os blocos de código Terraform para provisionar os recursos Azure propostos, seguindo a estrutura de arquivos e as diretrizes de nomenclatura.\n"
        "Priorize o uso de módulos Terraform (ex: `network`, `compute`, `database`) para reutilização.\n\n"
        "**Formato de Saída para Terraform:**\n"
        "Para cada arquivo Terraform, envolva o código em blocos de código Markdown ````terraform` e use cabeçalhos específicos:\n\n"
        "#### Arquivo Terraform: versions.tf\n"
        "```terraform\n"
        "terraform {\n"
        "  required_providers {\n"
        "    azurerm = {\n"
        "      source  = \"hashicorp/azurerm\"\n"
        "      version = \"~> 3.0\"\n"
        "    }\n"
        "  }\n"
        "  required_version = \">= 1.0.0\"\n"
        "}\n"
        "```\n\n"
        "#### Arquivo Terraform: providers.tf\n"
        "```terraform\n"
        "provider \"azurerm\" {\n"
        "  features {}\n"
        "  # Autenticação via Azure CLI, Managed Identity ou Service Principal\n"
        "  # subscription_id = var.azure_subscription_id # Exemplo\n"
        "  # tenant_id       = var.azure_tenant_id       # Exemplo\n"
        "}\n"
        "```\n\n"
        "#### Arquivo Terraform: variables.tf\n"
        "```terraform\n"
        "variable \"project_name\" {\n"
        "  description = \"Nome do projeto/aplicação.\"\n"
        "  type        = string\n"
        "}\n\n"
        "variable \"environment\" {\n"
        "  description = \"Ambiente de implantação (ex: dev, prd, hml).\"\n"
        "  type        = string\n"
        "}\n\n"
        "variable \"location\" {\n"
        "  description = \"Região do Azure para os recursos.\"\n"
        "  type        = string\n"
        "  default     = \"East US\"\n"
        "}\n\n"
        "variable \"resource_group_name_prefix\" {\n"
        "  description = \"Prefixo para o nome do Resource Group.\"\n"
        "  type        = string\n"
        "  default     = \"rg\"\n"
        "}\n\n"
        "variable \"vnet_cidr\" {\n"
        "  description = \"CIDR da VNet principal.\"\n"
        "  type        = string\n"
        "  default     = \"10.0.0.0/16\"\n"
        "}\n\n"
        "variable \"aro_cluster_name_prefix\" {\n"
        "  description = \"Prefixo para o nome do cluster ARO.\"\n"
        "  type        = string\n"
        "  default     = \"aro-cluster\"\n"
        "}\n\n"
        "variable \"db_admin_username\" {\n"
        "  description = \"Nome de usuário para o administrador do banco de dados (referenciado de Key Vault).\"\n"
        "  type        = string\n"
        "  # Este valor não deve ser definido diretamente aqui. Deve ser buscado de um segredo.\n"
        "  default = \"dbadmin\"\n"
        "}\n\n"
        "# Exemplo de variável para referência a segredos via Key Vault\n"
        "variable \"db_admin_password_secret_name\" {\n"
        "  description = \"Nome do segredo no Key Vault para a senha do DB.\"\n"
        "  type        = string\n"
        "}\n\n"
        "variable \"key_vault_name\" {\n"
        "  description = \"Nome do Key Vault a ser criado ou referenciado.\"\n"
        "  type        = string\n"
        "}\n"
        "```\n\n"
        "#### Arquivo Terraform: main.tf\n"
        "```terraform\n"
        "resource \"azurerm_resource_group\" \"main\" {\n"
        "  name     = \"${var.resource_group_name_prefix}-${var.project_name}-${var.environment}-${var.location}\"\n"
        "  location = var.location\n"
        "  tags = {\n"
        "    environment = var.environment\n"
        "    project     = var.project_name\n"
        "  }\n"
        "}\n\n"
        "# Exemplo de Módulo de Rede (modules/network)\n"
        "module \"network\" {\n"
        "  source = \"./modules/network\"\n"
        "  resource_group_name = azurerm_resource_group.main.name\n"
        "  location            = var.location\n"
        "  vnet_name           = \"vnet-${var.project_name}-${var.environment}\"\n"
        "  vnet_cidr           = var.vnet_cidr\n"
        "  subnet_cidrs        = {\n"
        "    \"subnet-aro\"    = \"10.0.1.0/24\"\n"
        "    \"subnet-db\"     = \"10.0.2.0/24\"\n"
        "    \"subnet-apim\"   = \"10.0.3.0/24\"\n"
        "  }\n"
        "  tags = azurerm_resource_group.main.tags\n"
        "}\n\n"
        "# Exemplo de Key Vault\n"
        "resource \"azurerm_key_vault\" \"main\" {\n"
        "  name                      = var.key_vault_name\n"
        "  location                  = azurerm_resource_group.main.location\n"
        "  resource_group_name       = azurerm_resource_group.main.name\n"
        "  tenant_id                 = data.azurerm_client_config.current.tenant_id\n"
        "  sku_name                  = \"standard\"\n"
        "  soft_delete_retention_days= 7\n"
        "  purge_protection_enabled  = false\n"
        "  tags                      = azurerm_resource_group.main.tags\n"
        "}\n\n"
        "data \"azurerm_client_config\" \"current\" {}\n\n"
        "# Exemplo de Azure Red Hat OpenShift Cluster (ARO)\n"
        "# Este é um recurso complexo e pode requerer mais variáveis e pré-requisitos.\n"
        "resource \"azurerm_redhat_open_shift_cluster\" \"aro_cluster\" {\n"
        "  name                = \"${var.aro_cluster_name_prefix}-${var.project_name}-${var.environment}\"\n"
        "  location            = azurerm_resource_group.main.location\n"
        "  resource_group_name = azurerm_resource_group.main.name\n"
        "  cluster_resource_group = \"${azurerm_resource_group.main.name}-aro\"\n"
        "  network_cidr        = \"10.0.0.0/22\"\n"
        "\n"
        "  master_profile {\n"
        "    vm_size   = \"Standard_D8s_v3\"\n"
        "    subnet_id = module.network.subnets[\"subnet-aro\"].id\n"
        "  }\n"
        "\n"
        "  worker_profile {\n"
        "    vm_size   = \"Standard_D4s_v3\"\n"
        "    disk_size_gb = 128\n"
        "    node_count = 3\n"
        "    subnet_id = module.network.subnets[\"subnet-aro\"].id\n"
        "  }\n"
        "\n"
        "  tags = azurerm_resource_group.main.tags\n"
        "}\n\n"
        "resource \"azurerm_api_management_service\" \"api_gateway\" {\n"
        "  name                = \"apim-${var.project_name}-${var.environment}\"\n"
        "  location            = azurerm_resource_group.main.location\n"
        "  resource_group_name = azurerm_resource_group.main.name\n"
        "  publisher_name      = \"${var.project_name} API Publisher\"\n"
        "  publisher_email     = \"apis@${var.project_name}.com\"\n"
        "  sku_name            = \"Developer_1\"\n"
        "  tags                = azurerm_resource_group.main.tags\n"
        "}\n\n"
        "resource \"azurerm_postgresql_flexible_server\" \"db_core\" {\n"
        "  name                   = \"pg-${var.project_name}-${var.environment}\"\n"
        "  resource_group_name    = azurerm_resource_group.main.name\n"
        "  location               = azurerm_resource_group.main.location\n"
        "  version                = \"13\"\n"
        "  sku_name               = \"Standard_D2ds_v4\"\n"
        "  storage_mb             = 32768\n"
        "  administrator_login    = var.db_admin_username\n"
        "  administrator_password = azurerm_key_vault_secret.db_password.value # Referência ao segredo\n"
        "  backup_retention_days  = 7\n"
        "  geo_redundant_backup_enabled = false\n"
        "  tags                   = azurerm_resource_group.main.tags\n"
        "}\n\n"
        "resource \"azurerm_key_vault_secret\" \"db_password\" {\n"
        "  name         = var.db_admin_password_secret_name\n"
        "  value        = \"SenhaGeradaOuBuscadaDeAlgumLugarSeguro\" # Em um cenário real, não seria hardcoded\n"
        "  key_vault_id = azurerm_key_vault.main.id\n"
        "  content_type = \"text/plain\"\n"
        "  depends_on   = [azurerm_key_vault.main]\n"
        "}\n"
        "```\n\n"
        "#### Arquivo Terraform: outputs.tf\n"
        "```terraform\n"
        "output \"resource_group_id\" {\n"
        "  description = \"ID do Resource Group criado.\"\n"
        "  value       = azurerm_resource_group.main.id\n"
        "}\n\n"
        "output \"aro_cluster_id\" {\n"
        "  description = \"ID do cluster Azure Red Hat OpenShift.\"\n"
        "  value       = azurerm_redhat_open_shift_cluster.aro_cluster.id\n"
        "}\n\n"
        "output \"api_management_gateway_url\" {\n"
        "  description = \"URL do API Management Gateway.\"\n"
        "  value       = azurerm_api_management_service.api_gateway.gateway_url\n"
        "}\n"
        "```\n"
    )

    # Concatena o prompt base com as diretrizes específicas da plataforma e a seção Terraform
    full_prompt = (
        main_solution_prompt_content +
        platform_specific_guidelines +
        "**7. Informações Relevantes Adicionais:**\n\n"
        "   * **UTILIZE AS SEGUINTES INFORMAÇÕES SALVAS:**\n\n"
        "       * \"Visão geral dos 10 componentes chave da arquitetura de microsserviços: Cliente, CDN, Load Balancer, API Gateway, Microsserviços, Message Broker, Databases, Identity Provider, Service Registry e Discovery, Service Coordenação (e.g., Zookeeper).\"\n\n"
        + plantuml_section_guidelines + # Instruções sobre PlantUML
        terraform_templates_str + # Adiciona a seção Terraform aqui
        f"Transcrição analisada:\n{transcription_text}"
    )
    
    return full_prompt

def call_gemini_api_azure(prompt_text, prompt_purpose, api_key):
    """
    Chama o modelo Gemini com o texto do prompt fornecido, específico para Azure.
    """
    logger.info(f"[Módulo Solução Azure] Chamando o modelo Gemini para: {prompt_purpose}.")
    if genai is None:
        messagebox.showerror("Erro de Dependência", "A biblioteca 'google.generativeai' não está disponível. Não é possível gerar a solução Azure.")
        logger.error("google.generativeai não carregado. Geração de solução Azure abortada.")
        return None

    genai.configure(api_key=api_key)

    try:
        model = genai.GenerativeModel('models/gemini-1.5-flash')
        logger.debug(f"[Módulo Solução Azure] Prompt enviado para Gemini (primeiros 200 chars): {prompt_text[:200]}...")
        
        response = model.generate_content(prompt_text)
        logger.info(f"[Módulo Solução Azure] Resposta da GEM para {prompt_purpose} recebida com sucesso.")
        return response.text
    except Exception as e:
        logger.error(f"[Módulo Solução Azure] Erro ao chamar a API da GEM para {prompt_purpose}: {e}", exc_info=True)
        messagebox.showerror(f"Erro na GEM de Solução Azure", f"Não foi possível obter a resposta da GEM: {e}")
        return None